;; Sockets

(define (make-zmq-socket context type)
  (let ((socket (c-call "zmq_socket" null-alien context ((zmq-ref zmq-socket-types) type))))
    (if (alien-null? socket)
      (error "could not make socket" (get-zmq-error-string))
      socket)))

(define (zmq-socket-close socket)
  (if (= -1 (c-call "zmq_close" socket))
    (error "could not close socket" (get-zmq-error-string))))

(define (zmq-socket-option socket option value length)
  (if
    (= -1
      (c-call "zmq_getsockopt"
        socket
        ((zmq-ref zmq-socket-options) option)
        value
        length))
    (error "could not get socket option" (get-zmq-error-string))))

(define (set-zmq-socket-option! socket option value length)
  (if
    (= -1
      (c-call "zmq_setsockopt"
        socket
        ((zmq-ref zmq-socket-options) option)
        value
        length))
    (error "could not set socket option" (get-zmq-error-string))))

(define (zmq-socket-bind socket address)
  (if (= -1 (c-call "zmq_bind" socket address))
    (error "could not bind socket" (get-zmq-error-string))))

(define (zmq-socket-connect socket address)
  (if (= -1 (c-call "zmq_connect" socket address))
    (error "could not connect socket" (get-zmq-error-string))))

(define (zmq-socket-unbind socket address)
  (if (= -1 (c-call "zmq_unbind" socket address))
    (error "could not unbind socket" (get-zmq-error-string))))

(define (zmq-socket-disconnect socket address)
  (if (= -1 (c-call "zmq_disconnect" socket address))
    (error "could not disconnect socket" (get-zmq-error-string))))

(define (zmq-socket-send socket buffer length #!optional flags)
  (if (= -1 (c-call "zmq_send" socket buffer length (get-zmq-flags flags)))
    (error "could not send socket" (get-zmq-error-string))))

(define (zmq-socket-send-const socket buffer length #!optional flags)
  (if (= -1 (c-call "zmq_send_const" socket buffer length (get-zmq-flags flags)))
    (error "could not send const socket" (get-zmq-error-string))))

(define (zmq-socket-receive socket buffer length #!optional flags)
  (if (= -1 (c-call "zmq_recv" socket buffer length (get-zmq-flags flags)))
    (error "could not receive socket" (get-zmq-error-string))))

(define (zmq-socket-monitor socket address events)
  (if (= -1 (c-call "zmq_socket_monitor" socket address (get-zmq-socket-events events)))
    (error "could not monitor socket" (get-zmq-error-string))))

(define (get-zmq-socket-events events)
  (cond
    ((default-object? events) 0)
    ((number? events) events)
    ((list? events) (fold-left + 0 (map (zmq-ref zmq-socket-events) events)))
    (else (error "invalid socket event" events))))

(define zmq-socket-types
  '((pair   0)
    (pub    1)
    (sub    2)
    (req    3)
    (rep    4)
    (dealer 5)
    (router 6)
    (pull   7)
    (push   8)
    (xpub   9)
    (xsub   10)
    (stream 11)))

(define zmq-socket-events
  '((event-connected         0x0001)
    (event-connect-delayed   0x0002)
    (event-connect-retried   0x0004)
    (event-listening         0x0008)
    (event-bind-failed       0x0010)
    (event-accepted          0x0020)
    (event-accept-failed     0x0040)
    (event-closed            0x0080)
    (event-close-failed      0x0100)
    (event-disconnected      0x0200)
    (event-monitor-stopped   0x0400)
    (event-all               0xffff)))

(define zmq-socket-options
  '((affinity 4)
    (identity 5)
    (subscribe 6)
    (unsubscribe 7)
    (rate 8)
    (recovery-ivl 9)
    (sndbuf 11)
    (rcvbuf 12)
    (rcvmore 13)
    (fd 14)
    (events 15)
    (type 16)
    (linger 17)
    (reconnect-ivl 18)
    (backlog 19)
    (reconnect-ivl-max 21)
    (maxmmsgsize 22)
    (sndhwm 23)
    (rcvhwm 24)
    (multicast-hops 25)
    (rcvtimeo 27)
    (sndtimeo 28)
    (last-endpoint 32)
    (router-mandatory 33)
    (tcp-keepalive 34)
    (tcp-keepalive-cnt 35)
    (tcp-keepalive-idle 36)
    (tcp-keepalive-intvl 37)
    (immediate 39)
    (xpub-verbose 40)
    (router-raw 41)
    (ipv6 42)
    (mechanism 43)
    (plain-server 44)
    (plain-username 45)
    (plain-password 46)
    (curve-server 47)
    (curve-publickey 48)
    (curve-secretkey 49)
    (curve-serverkey 50)
    (probe-router 51)
    (req-correlate 52)
    (req-relaxed 53)
    (conflate 54)
    (zap-domain 55)
    (router-handover 56)
    (tos 57)
    (connect-rid 61)
    (gssapi-server 62)
    (gssapi-principal 63)
    (gssapi-service-principal 64)
    (gssapi-plaintext 65)
    (handshake-ivl 66)
    (socks-proxy 68)
    (xpub-nodrop 69)
    (blocky 70)
    (xpub-manual 71)
    (xpub-welcome-msg 72)
    (stream-notify 73)
    (invert-matching 74)
    (heartbeat-ivl 75)
    (heartbeat-ttl 76)
    (heartbeat-timeout 77)
    (xpub-verboser 78)
    (connect-timeout 79)
    (tcp-maxrt 80)
    (thread-safe 81)
    (multicast-maxtpdu 84)
    (vmci-buffer-size 85)
    (vmci-buffer-min-size 86)
    (vmci-buffer-max-size 87)
    (vmci-connect-timeout 88)
    (use-fd 89)))
